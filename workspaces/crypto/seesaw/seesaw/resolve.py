from Crypto.Util.number import inverse, long_to_bytes
from sympy import isprime

n = 362433315617467211669633373003829486226172411166482563442958886158019905839570405964630640284863309204026062750823707471292828663974783556794504696138513859209
c = 104442881094680864129296583260490252400922571545171796349604339308085282733910615781378379107333719109188819881987696111496081779901973854697078360545565962079
e = 65537

for q in range(2**16):
    if q > 1 and n % q == 0 and isprime(q):
        break

p = n // q

phi = (p - 1) * (q - 1)

d = inverse(e, phi)

m = pow(c, d, n)

flag = long_to_bytes(m)
print(flag.decode())
